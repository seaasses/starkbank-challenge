services:
  api:
    build:
      context: ./api/ 
      dockerfile: Dockerfile.dev
    container_name: starkbank-api
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app
      - /app/.venv
      - /app/__pycache__
      - /app/**/__pycache__
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=default
      - RABBITMQ_PASS=dev_password
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  rabbitmq:
    image: rabbitmq:3
    container_name: starkbank-rabbitmq
    ports:
      - "5672:5672"  # AMQP protocol port
    environment:
      - RABBITMQ_DEFAULT_USER=default
      - RABBITMQ_DEFAULT_PASS=dev_password
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  queue_consumer:
    build:
      context: ./queue/
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=default
      - RABBITMQ_PASS=dev_password
      - NUM_CONSUMERS_PER_INSTANCE=50
      - QUEUE_NAME=starkbank-queue
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: on-failure:3
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

volumes:
  redis_data:
  rabbitmq_data: 